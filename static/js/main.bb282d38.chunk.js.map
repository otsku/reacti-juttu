{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","pics","error","Details","id","handleClick","bind","assertThisInitialized","fetchPics","_this2","fetch","then","response","json","data","setState","catch","pic","_this3","_this$state","cell","display","flexWrap","padding","margin","react_default","a","createElement","App_Details","Fragment","style","message","map","user","thumbnailUrl","key","value","onClick","e","src","React","Component","_this4","Loading","errors","_this5","url","console","log","_this6","_this$state2","back","top","App_App","title","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb282d38.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tisLoading: true,\r\n\t\t\tpics: [],\r\n\t\t\terror: null,\r\n\t\t\tDetails: false,\r\n\t\t\tid: null\r\n\t\t}\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tif(this.state.id === null) {\r\n\t\t\tthis.fetchPics();\r\n\t\t}\t\r\n\t}\r\n\r\n\tfetchPics() {\r\n\t\t// Where we're fetching data from\r\n\t\tfetch(`https://jsonplaceholder.typicode.com/photos`)\r\n\t\t\t// We get the API response and receive data in JSON format...\r\n\t\t\t.then(response => response.json())\r\n\t\t\t// ...then we update the users state\r\n\t\t\t.then(data =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\tpics: data,\r\n\t\t\t\tisLoading: false,\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t// Catch any errors we hit and update the app\r\n\t\t\t.catch(error => this.setState({ error, isLoading: false }));\r\n\t}\r\n\r\n\thandleClick(pic) {\r\n\t\tthis.setState({id: pic});\r\n\t\tthis.setState({Details: true});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { isLoading, pics, error } = this.state;\r\n\t\tconst divStyle = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexWrap: 'wrap',\r\n\t\t};\r\n\t\tconst cell = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexWrap: 'wrap',\r\n\t\t\tpadding: '4px 1px 4px 1px',\r\n  \t\t\tmargin: 'auto',\r\n\t\t};\r\n\t\tif(this.state.Details === true) {\r\n\t\t\treturn(<Details pic={this.state.id} />);\r\n\t\t}\r\n\t\treturn (\r\n\t\t \t<React.Fragment>\r\n\t\t\t\t<h1>Pictures</h1>\r\n\t\t\t\t<div style={divStyle}>\r\n\t\t\t\t{error ? <p>{error.message}</p> : null}\r\n\t\t\t\t{!isLoading ? (\r\n\t\t\t\t\tpics.map(user => {\r\n\t\t\t\t\t\tconst { id, thumbnailUrl } = user;\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div style={cell} key={id}>\r\n\t\t\t\t\t\t\t\t<img value={id} onClick={(e) => this.handleClick(id, e)} src={thumbnailUrl}/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t// If there is a delay in data, let's let the user know it's loading\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<h3>Loading...</h3>\r\n\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t  \t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Details extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tLoading: true,\r\n\t\t\tpic: [],\r\n\t\t\terrors: null,\r\n\t\t\tDetails: true\r\n\t\t}\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchPics();\r\n\t}\r\n\r\n\tfetchPics() {\r\n\t\t// Where we're fetching data from\r\n\t\tconst url = 'https://jsonplaceholder.typicode.com/photos?id=' + this.props.pic;\r\n\t\tconsole.log(url);\r\n\t\tfetch(url)\r\n\t\t\t// We get the API response and receive data in JSON format...\r\n\t\t\t.then(response => response.json())\r\n\t\t\t// ...then we update the users state\r\n\t\t\t.then(data =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\tpic: data,\r\n\t\t\t\tLoading: false,\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t// Catch any errors we hit and update the app\r\n\t\t\t.catch(errors => this.setState({ errors, Loading: false }));\r\n\t}\r\n\r\n\thandleClick() {\r\n\t\tthis.setState({Details: false});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { Loading, pic, errors } = this.state;\r\n\t\tconst back = {\r\n\t\t\ttop: '0px',\r\n\t\t};\r\n\t\tif(this.state.Details === false) {\r\n\t\t\treturn(<App/>);\r\n\t\t}\r\n\t\treturn (\r\n\t\t \t<React.Fragment>\r\n\t\t\t\t<h1>Pictures</h1>\r\n\t\t\t\t<div>\r\n\t\t\t\t{errors ? <p>{errors.message}</p> : null}\r\n\t\t\t\t{!Loading ? (\r\n\t\t\t\t\tpic.map(user => {\r\n\t\t\t\t\t\tconst { id, url, title } = user;\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={id}>\r\n\t\t\t\t\t\t\t\t<button style={back} onClick={this.handleClick} >Back</button>\r\n\t\t\t\t\t\t\t\t<img value={id} src={url}/>\r\n\t\t\t\t\t\t\t\t<p>{title}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t// If there is a delay in data, let's let the user know it's loading\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<h3>Loading...</h3>\r\n\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t  \t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}